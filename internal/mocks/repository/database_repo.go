// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	models "github.com/hentan/final_project/internal/models"
	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// DatabaseRepo is an autogenerated mock type for the DatabaseRepo type
type DatabaseRepo struct {
	mock.Mock
}

type DatabaseRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *DatabaseRepo) EXPECT() *DatabaseRepo_Expecter {
	return &DatabaseRepo_Expecter{mock: &_m.Mock}
}

// AllAuthors provides a mock function with given fields:
func (_m *DatabaseRepo) AllAuthors() ([]*models.Author, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AllAuthors")
	}

	var r0 []*models.Author
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*models.Author, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*models.Author); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Author)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DatabaseRepo_AllAuthors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllAuthors'
type DatabaseRepo_AllAuthors_Call struct {
	*mock.Call
}

// AllAuthors is a helper method to define mock.On call
func (_e *DatabaseRepo_Expecter) AllAuthors() *DatabaseRepo_AllAuthors_Call {
	return &DatabaseRepo_AllAuthors_Call{Call: _e.mock.On("AllAuthors")}
}

func (_c *DatabaseRepo_AllAuthors_Call) Run(run func()) *DatabaseRepo_AllAuthors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DatabaseRepo_AllAuthors_Call) Return(_a0 []*models.Author, _a1 error) *DatabaseRepo_AllAuthors_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DatabaseRepo_AllAuthors_Call) RunAndReturn(run func() ([]*models.Author, error)) *DatabaseRepo_AllAuthors_Call {
	_c.Call.Return(run)
	return _c
}

// AllBooks provides a mock function with given fields:
func (_m *DatabaseRepo) AllBooks() ([]*models.Book, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AllBooks")
	}

	var r0 []*models.Book
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*models.Book, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*models.Book); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Book)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DatabaseRepo_AllBooks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllBooks'
type DatabaseRepo_AllBooks_Call struct {
	*mock.Call
}

// AllBooks is a helper method to define mock.On call
func (_e *DatabaseRepo_Expecter) AllBooks() *DatabaseRepo_AllBooks_Call {
	return &DatabaseRepo_AllBooks_Call{Call: _e.mock.On("AllBooks")}
}

func (_c *DatabaseRepo_AllBooks_Call) Run(run func()) *DatabaseRepo_AllBooks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DatabaseRepo_AllBooks_Call) Return(_a0 []*models.Book, _a1 error) *DatabaseRepo_AllBooks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DatabaseRepo_AllBooks_Call) RunAndReturn(run func() ([]*models.Book, error)) *DatabaseRepo_AllBooks_Call {
	_c.Call.Return(run)
	return _c
}

// Connection provides a mock function with given fields:
func (_m *DatabaseRepo) Connection() *sql.DB {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Connection")
	}

	var r0 *sql.DB
	if rf, ok := ret.Get(0).(func() *sql.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.DB)
		}
	}

	return r0
}

// DatabaseRepo_Connection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Connection'
type DatabaseRepo_Connection_Call struct {
	*mock.Call
}

// Connection is a helper method to define mock.On call
func (_e *DatabaseRepo_Expecter) Connection() *DatabaseRepo_Connection_Call {
	return &DatabaseRepo_Connection_Call{Call: _e.mock.On("Connection")}
}

func (_c *DatabaseRepo_Connection_Call) Run(run func()) *DatabaseRepo_Connection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DatabaseRepo_Connection_Call) Return(_a0 *sql.DB) *DatabaseRepo_Connection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DatabaseRepo_Connection_Call) RunAndReturn(run func() *sql.DB) *DatabaseRepo_Connection_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAuthor provides a mock function with given fields: id
func (_m *DatabaseRepo) DeleteAuthor(id int) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAuthor")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DatabaseRepo_DeleteAuthor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAuthor'
type DatabaseRepo_DeleteAuthor_Call struct {
	*mock.Call
}

// DeleteAuthor is a helper method to define mock.On call
//   - id int
func (_e *DatabaseRepo_Expecter) DeleteAuthor(id interface{}) *DatabaseRepo_DeleteAuthor_Call {
	return &DatabaseRepo_DeleteAuthor_Call{Call: _e.mock.On("DeleteAuthor", id)}
}

func (_c *DatabaseRepo_DeleteAuthor_Call) Run(run func(id int)) *DatabaseRepo_DeleteAuthor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *DatabaseRepo_DeleteAuthor_Call) Return(_a0 error) *DatabaseRepo_DeleteAuthor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DatabaseRepo_DeleteAuthor_Call) RunAndReturn(run func(int) error) *DatabaseRepo_DeleteAuthor_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteBook provides a mock function with given fields: id
func (_m *DatabaseRepo) DeleteBook(id int) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBook")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DatabaseRepo_DeleteBook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBook'
type DatabaseRepo_DeleteBook_Call struct {
	*mock.Call
}

// DeleteBook is a helper method to define mock.On call
//   - id int
func (_e *DatabaseRepo_Expecter) DeleteBook(id interface{}) *DatabaseRepo_DeleteBook_Call {
	return &DatabaseRepo_DeleteBook_Call{Call: _e.mock.On("DeleteBook", id)}
}

func (_c *DatabaseRepo_DeleteBook_Call) Run(run func(id int)) *DatabaseRepo_DeleteBook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *DatabaseRepo_DeleteBook_Call) Return(_a0 error) *DatabaseRepo_DeleteBook_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DatabaseRepo_DeleteBook_Call) RunAndReturn(run func(int) error) *DatabaseRepo_DeleteBook_Call {
	_c.Call.Return(run)
	return _c
}

// InsertAuthor provides a mock function with given fields: author
func (_m *DatabaseRepo) InsertAuthor(author models.Author) (int, error) {
	ret := _m.Called(author)

	if len(ret) == 0 {
		panic("no return value specified for InsertAuthor")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Author) (int, error)); ok {
		return rf(author)
	}
	if rf, ok := ret.Get(0).(func(models.Author) int); ok {
		r0 = rf(author)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(models.Author) error); ok {
		r1 = rf(author)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DatabaseRepo_InsertAuthor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertAuthor'
type DatabaseRepo_InsertAuthor_Call struct {
	*mock.Call
}

// InsertAuthor is a helper method to define mock.On call
//   - author models.Author
func (_e *DatabaseRepo_Expecter) InsertAuthor(author interface{}) *DatabaseRepo_InsertAuthor_Call {
	return &DatabaseRepo_InsertAuthor_Call{Call: _e.mock.On("InsertAuthor", author)}
}

func (_c *DatabaseRepo_InsertAuthor_Call) Run(run func(author models.Author)) *DatabaseRepo_InsertAuthor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Author))
	})
	return _c
}

func (_c *DatabaseRepo_InsertAuthor_Call) Return(_a0 int, _a1 error) *DatabaseRepo_InsertAuthor_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DatabaseRepo_InsertAuthor_Call) RunAndReturn(run func(models.Author) (int, error)) *DatabaseRepo_InsertAuthor_Call {
	_c.Call.Return(run)
	return _c
}

// InsertBook provides a mock function with given fields: book
func (_m *DatabaseRepo) InsertBook(book models.Book) (int, error) {
	ret := _m.Called(book)

	if len(ret) == 0 {
		panic("no return value specified for InsertBook")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Book) (int, error)); ok {
		return rf(book)
	}
	if rf, ok := ret.Get(0).(func(models.Book) int); ok {
		r0 = rf(book)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(models.Book) error); ok {
		r1 = rf(book)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DatabaseRepo_InsertBook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertBook'
type DatabaseRepo_InsertBook_Call struct {
	*mock.Call
}

// InsertBook is a helper method to define mock.On call
//   - book models.Book
func (_e *DatabaseRepo_Expecter) InsertBook(book interface{}) *DatabaseRepo_InsertBook_Call {
	return &DatabaseRepo_InsertBook_Call{Call: _e.mock.On("InsertBook", book)}
}

func (_c *DatabaseRepo_InsertBook_Call) Run(run func(book models.Book)) *DatabaseRepo_InsertBook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Book))
	})
	return _c
}

func (_c *DatabaseRepo_InsertBook_Call) Return(_a0 int, _a1 error) *DatabaseRepo_InsertBook_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DatabaseRepo_InsertBook_Call) RunAndReturn(run func(models.Book) (int, error)) *DatabaseRepo_InsertBook_Call {
	_c.Call.Return(run)
	return _c
}

// OneAuthor provides a mock function with given fields: id
func (_m *DatabaseRepo) OneAuthor(id int) (*models.Author, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for OneAuthor")
	}

	var r0 *models.Author
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*models.Author, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *models.Author); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Author)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DatabaseRepo_OneAuthor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OneAuthor'
type DatabaseRepo_OneAuthor_Call struct {
	*mock.Call
}

// OneAuthor is a helper method to define mock.On call
//   - id int
func (_e *DatabaseRepo_Expecter) OneAuthor(id interface{}) *DatabaseRepo_OneAuthor_Call {
	return &DatabaseRepo_OneAuthor_Call{Call: _e.mock.On("OneAuthor", id)}
}

func (_c *DatabaseRepo_OneAuthor_Call) Run(run func(id int)) *DatabaseRepo_OneAuthor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *DatabaseRepo_OneAuthor_Call) Return(_a0 *models.Author, _a1 error) *DatabaseRepo_OneAuthor_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DatabaseRepo_OneAuthor_Call) RunAndReturn(run func(int) (*models.Author, error)) *DatabaseRepo_OneAuthor_Call {
	_c.Call.Return(run)
	return _c
}

// OneBook provides a mock function with given fields: id
func (_m *DatabaseRepo) OneBook(id int) (*models.Book, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for OneBook")
	}

	var r0 *models.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*models.Book, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *models.Book); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Book)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DatabaseRepo_OneBook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OneBook'
type DatabaseRepo_OneBook_Call struct {
	*mock.Call
}

// OneBook is a helper method to define mock.On call
//   - id int
func (_e *DatabaseRepo_Expecter) OneBook(id interface{}) *DatabaseRepo_OneBook_Call {
	return &DatabaseRepo_OneBook_Call{Call: _e.mock.On("OneBook", id)}
}

func (_c *DatabaseRepo_OneBook_Call) Run(run func(id int)) *DatabaseRepo_OneBook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *DatabaseRepo_OneBook_Call) Return(_a0 *models.Book, _a1 error) *DatabaseRepo_OneBook_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DatabaseRepo_OneBook_Call) RunAndReturn(run func(int) (*models.Book, error)) *DatabaseRepo_OneBook_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAuthor provides a mock function with given fields: author
func (_m *DatabaseRepo) UpdateAuthor(author models.Author) error {
	ret := _m.Called(author)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAuthor")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Author) error); ok {
		r0 = rf(author)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DatabaseRepo_UpdateAuthor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAuthor'
type DatabaseRepo_UpdateAuthor_Call struct {
	*mock.Call
}

// UpdateAuthor is a helper method to define mock.On call
//   - author models.Author
func (_e *DatabaseRepo_Expecter) UpdateAuthor(author interface{}) *DatabaseRepo_UpdateAuthor_Call {
	return &DatabaseRepo_UpdateAuthor_Call{Call: _e.mock.On("UpdateAuthor", author)}
}

func (_c *DatabaseRepo_UpdateAuthor_Call) Run(run func(author models.Author)) *DatabaseRepo_UpdateAuthor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Author))
	})
	return _c
}

func (_c *DatabaseRepo_UpdateAuthor_Call) Return(_a0 error) *DatabaseRepo_UpdateAuthor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DatabaseRepo_UpdateAuthor_Call) RunAndReturn(run func(models.Author) error) *DatabaseRepo_UpdateAuthor_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAuthorAndBook provides a mock function with given fields: author, book
func (_m *DatabaseRepo) UpdateAuthorAndBook(author models.Author, book models.Book) error {
	ret := _m.Called(author, book)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAuthorAndBook")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Author, models.Book) error); ok {
		r0 = rf(author, book)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DatabaseRepo_UpdateAuthorAndBook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAuthorAndBook'
type DatabaseRepo_UpdateAuthorAndBook_Call struct {
	*mock.Call
}

// UpdateAuthorAndBook is a helper method to define mock.On call
//   - author models.Author
//   - book models.Book
func (_e *DatabaseRepo_Expecter) UpdateAuthorAndBook(author interface{}, book interface{}) *DatabaseRepo_UpdateAuthorAndBook_Call {
	return &DatabaseRepo_UpdateAuthorAndBook_Call{Call: _e.mock.On("UpdateAuthorAndBook", author, book)}
}

func (_c *DatabaseRepo_UpdateAuthorAndBook_Call) Run(run func(author models.Author, book models.Book)) *DatabaseRepo_UpdateAuthorAndBook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Author), args[1].(models.Book))
	})
	return _c
}

func (_c *DatabaseRepo_UpdateAuthorAndBook_Call) Return(_a0 error) *DatabaseRepo_UpdateAuthorAndBook_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DatabaseRepo_UpdateAuthorAndBook_Call) RunAndReturn(run func(models.Author, models.Book) error) *DatabaseRepo_UpdateAuthorAndBook_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBook provides a mock function with given fields: book
func (_m *DatabaseRepo) UpdateBook(book models.Book) error {
	ret := _m.Called(book)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBook")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Book) error); ok {
		r0 = rf(book)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DatabaseRepo_UpdateBook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBook'
type DatabaseRepo_UpdateBook_Call struct {
	*mock.Call
}

// UpdateBook is a helper method to define mock.On call
//   - book models.Book
func (_e *DatabaseRepo_Expecter) UpdateBook(book interface{}) *DatabaseRepo_UpdateBook_Call {
	return &DatabaseRepo_UpdateBook_Call{Call: _e.mock.On("UpdateBook", book)}
}

func (_c *DatabaseRepo_UpdateBook_Call) Run(run func(book models.Book)) *DatabaseRepo_UpdateBook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Book))
	})
	return _c
}

func (_c *DatabaseRepo_UpdateBook_Call) Return(_a0 error) *DatabaseRepo_UpdateBook_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DatabaseRepo_UpdateBook_Call) RunAndReturn(run func(models.Book) error) *DatabaseRepo_UpdateBook_Call {
	_c.Call.Return(run)
	return _c
}

// NewDatabaseRepo creates a new instance of DatabaseRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDatabaseRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *DatabaseRepo {
	mock := &DatabaseRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
