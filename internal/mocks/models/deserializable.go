// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Deserializable is an autogenerated mock type for the Deserializable type
type Deserializable struct {
	mock.Mock
}

type Deserializable_Expecter struct {
	mock *mock.Mock
}

func (_m *Deserializable) EXPECT() *Deserializable_Expecter {
	return &Deserializable_Expecter{mock: &_m.Mock}
}

// Deserialize provides a mock function with given fields: data
func (_m *Deserializable) Deserialize(data []byte) error {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for Deserialize")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Deserializable_Deserialize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Deserialize'
type Deserializable_Deserialize_Call struct {
	*mock.Call
}

// Deserialize is a helper method to define mock.On call
//   - data []byte
func (_e *Deserializable_Expecter) Deserialize(data interface{}) *Deserializable_Deserialize_Call {
	return &Deserializable_Deserialize_Call{Call: _e.mock.On("Deserialize", data)}
}

func (_c *Deserializable_Deserialize_Call) Run(run func(data []byte)) *Deserializable_Deserialize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *Deserializable_Deserialize_Call) Return(_a0 error) *Deserializable_Deserialize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Deserializable_Deserialize_Call) RunAndReturn(run func([]byte) error) *Deserializable_Deserialize_Call {
	_c.Call.Return(run)
	return _c
}

// NewDeserializable creates a new instance of Deserializable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDeserializable(t interface {
	mock.TestingT
	Cleanup(func())
}) *Deserializable {
	mock := &Deserializable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
